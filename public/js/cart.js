
// Add to cart functionality

 window.csrfToken = "{{ csrf_token() }}";
// --- 1. H√ÄM T√çNH T·ªîNG C·ªòNG ---
function cartpUpdateTotal() {
    const items = document.querySelectorAll('.cartp-item');
    let total = 0;

    items.forEach(item => {
        const cb = item.querySelector('.cartp-select');
        const price = parseInt(item.querySelector('.cartp-price').dataset.price);
        const qty = parseInt(item.querySelector('.cartp-qty-input').value);
        const itemTotal = price * qty;

        const formattedItemTotal = itemTotal.toLocaleString('vi-VN', { maximumFractionDigits: 0 });
        item.querySelector('.cartp-price').textContent = formattedItemTotal + 'ƒë';

        if (cb.checked) total += itemTotal;
    });

    const formattedTotal = total.toLocaleString('vi-VN', { maximumFractionDigits: 0 });
    const totalElement = document.getElementById('cartp-total');
    if (totalElement) {
        totalElement.textContent = formattedTotal + 'ƒë';
    }
}

// --- 2. H√ÄM X√ìA M·ª§C GI·ªé H√ÄNG (FETCH API) ---
/**
 * G·ª≠i y√™u c·∫ßu DELETE ƒë·∫øn route /cart/{cartId} v√† c·∫≠p nh·∫≠t giao di·ªán.
 * @param {string} cartId ID c·ªßa m·ª•c gi·ªè h√†ng (CartItem ID).
 * @param {HTMLElement} elementToDelete Ph·∫ßn t·ª≠ HTML c·∫ßn x√≥a kh·ªèi DOM.
 */
async function deleteCartItem(cartId, elementToDelete) {
    const csrfToken = document.querySelector('meta[name="csrf-token"]')?.content;
    if (!csrfToken) return alert('Kh√¥ng t√¨m th·∫•y CSRF Token!');

    const itemName = elementToDelete?.querySelector('h3')?.textContent || "s·∫£n ph·∫©m n√†y";
    if (!confirm(`üóëÔ∏è B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a "${itemName}" kh·ªèi gi·ªè h√†ng kh√¥ng?`)) return;

    try {
        const res = await fetch(`/cart/${cartId}`, {
            method: 'DELETE',
            headers: { 'X-CSRF-TOKEN': csrfToken }
        });

        if (res.ok) {
            elementToDelete.remove();
            cartpUpdateTotal?.();
            console.log('‚úÖ X√≥a th√†nh c√¥ng');
            setTimeout(() => location.reload(), 500);
        } else {
            const data = await res.json().catch(() => ({}));
            alert(`‚ùå L·ªói x√≥a: ${data.message || 'Kh√¥ng r√µ nguy√™n nh√¢n'}`);
        }
    } catch (err) {
        console.error('L·ªói khi x√≥a:', err);
        alert('‚ö†Ô∏è C√≥ l·ªói khi k·∫øt n·ªëi m√°y ch·ªß!');
    }
}


// --- 3. KH·ªûI T·∫†O S·ª∞ KI·ªÜN ---
document.addEventListener('DOMContentLoaded', () => {

    // G√°n s·ª± ki·ªán thay ƒë·ªïi s·ªë l∆∞·ª£ng v√† ch·ªçn/b·ªè ch·ªçn
    document.querySelectorAll('.cartp-qty-input').forEach(i => i.addEventListener('input', cartpUpdateTotal));
    document.querySelectorAll('.cartp-select').forEach(cb => cb.addEventListener('change', cartpUpdateTotal));

    // G√°n s·ª± ki·ªán cho n√∫t X√ìA 1 M·ª§C
    document.querySelectorAll('.cartp-remove').forEach(btn => {
        btn.addEventListener('click', () => {
            const item = btn.closest('.cartp-item');
            // L·∫•y ID t·ª´ thu·ªôc t√≠nh data-cart-id
            const id = btn.getAttribute('data-cart-id');

            // Th·ª≠ x√≥a
            deleteCartItem(id, item);
        });
    });



    // Thanh to√°n
    document.querySelector('.cartp-checkout')?.addEventListener('click', () => {
        // T·∫°o m·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng ch·ª©a ID v√† S·ªë l∆∞·ª£ng
        const selectedItems = Array.from(document.querySelectorAll('.cartp-select:checked'))
            .map(cb => {
                const itemElement = cb.closest('.cartp-item');
                return {
                    id: itemElement.dataset.id,
                    qty: itemElement.querySelector('.cartp-qty-input').value
                };
            });

        if (selectedItems.length === 0) {
            alert('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt s·∫£n ph·∫©m ƒë·ªÉ thanh to√°n!');
            return;
        }

        // Chuy·ªÉn m·∫£ng ƒë·ªëi t∆∞·ª£ng th√†nh chu·ªói JSON
        const itemsJson = JSON.stringify(selectedItems);

        const form = document.createElement('form');
        form.method = 'POST';
        // Route Controller::checkout() n√™n x·ª≠ l√Ω vi·ªác nh·∫≠n m·∫£ng ID n√†y
        form.action = '/pay';
        form.innerHTML = `
                    <input type="hidden" name="_token" value="${document.querySelector('meta[name="csrf-token"]').getAttribute('content')}">
                    <input type="hidden" name="items" value='${itemsJson}'>
                     `;
        document.body.appendChild(form);
        form.submit();
    });

    // T√≠nh to√°n t·ªïng ti·ªÅn khi trang v·ª´a load
    cartpUpdateTotal();
});
